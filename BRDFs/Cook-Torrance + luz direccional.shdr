{
  "vertexSource": "#version 300 es \n\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 normalMatrix;\n\n\n\nin vec3 vertexPosition;\nin vec3 vertexNormal;\n\nout vec3 vNE; //Vector normal en espacio ojo\nout vec3 vLE; //Vector de direccion de luz\nout vec3 vVE; //Vector de vista (al ojo)\n\nuniform vec4 posL; //Posicion luz\nvoid main(void){\n    mat4 MV =  viewMatrix * modelMatrix;\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1.0);\n    \n    vec3 posVE = vec3(MV*vec4(vertexPosition,1.0));\n    vLE = normalize(vec3(posL-vec4(posVE,1.0)));\n    \n    mat4 MN = normalMatrix;\n    //Transformar normal del espacio objeto al ojo\n    vNE = normalize(vec3(MN * vec4(vertexNormal,0.0)));\n    \n    //Calcular el vector del ojo en espacio del ojo; el ojo, por def esta en el origen.\n    vVE= normalize(-posVE);\n    \n    \n    \n}",
  "fragmentSource": "#version 300 es\n#define PI 3.1415926535897932384626433832795\nprecision highp float;\n\nin vec3 vNE; \nin vec3 vLE;\nin vec3 vVE;\nout vec4 colorFrag;\nuniform vec4 ka;\nuniform float coefEspec;\nuniform vec4 kd;\nuniform vec4 ks;\n\nuniform vec4 pd;\nuniform vec4 ps;\nuniform float ax;\nuniform float ay;\nuniform vec4 dirL;\nvoid main(){\n    float PHI =3.141516;\n    vec3 N = normalize(vNE);\n    vec3 L = normalize(vLE);\n    vec3 V = normalize(vVE);\n   \n    //Calculo termino difuso + espec de Blinn-Phong\n    vec3 direccion = normalize(vec3(dirL));\n    vec3 H = normalize(direccion+V);\n    float difuso = max(dot(direccion,N),0.0) ;\n    float specBlinnPhong = pow(max(dot(N,H),0.0),coefEspec);\n    if(dot(direccion,N)< 0.0){\n        specBlinnPhong = 0.0;\n    }\n      \n    float titaH = max(dot(N,H),0.0);\n    float titaI = max(dot(N,direccion),0.0);\n    //Variables de la atenuacion geometrica\n \n    float Beckmann;\n    \n    //Termino de Fresnel \n    float F0 = 0.713;\n    float Fres = pow(1.0 - titaH, 5.0);\n    Fres *= (1.0 - F0);\n\tFres += F0;\n\n    //Termino de Beackmann\n \tfloat coeficienteA = 0.214187;\n    float divisor = pow(coeficienteA,2.0)* pow(titaH,4.0);\n    float exponente = -(pow(tan(acos(titaH))/coeficienteA,2.0));\n    exponente = exp(exponente);\n    Beckmann = exponente/divisor;\n    \n    //Variables de la atenuacion geometrica\n \tfloat GCT;\n    float Ge;\n    float Gs;\n    float titaV = max(dot(V,H),0.0);\n    Ge = (2.0*titaH*titaV)/(titaV);\n    Gs = (2.0*titaH*titaI)/(titaV);\n    \n    GCT=min(1.0,Ge);\n    GCT=min(GCT,Gs);\n    float componente1 = max(dot(N,V),0.0);\n    float componente2 = max(dot(N,direccion),0.0);\n    if(componente1*componente2>0.0)\n\t\tcolorFrag = ka +kd*difuso +ks*(Fres/3.141516)* (Beckmann*GCT)/(componente1*componente2);\n\telse\n\tcolorFrag = ka+kd*difuso;\n//colorFrag = ka+kd*difuso+ks*specBlinnPhong;\n}",
  "model": "sphere",
  "uniforms": [
    {
      "name": "posL",
      "type": "vec4",
      "value": [
        0,
        0,
        0,
        0
      ]
    },
    {
      "name": "ka",
      "type": "vec4",
      "value": [
        0.10000000149011612,
        0,
        0,
        0
      ]
    },
    {
      "name": "coefEspec",
      "type": "float",
      "value": 100
    },
    {
      "name": "kd",
      "type": "vec4",
      "value": [
        0.20000000298023224,
        0,
        0,
        0
      ]
    },
    {
      "name": "ks",
      "type": "vec4",
      "value": [
        1,
        1,
        1,
        1
      ]
    },
    {
      "name": "dirL",
      "type": "vec4",
      "value": [
        2.4000000953674316,
        2.990000009536743,
        0,
        0
      ]
    }
  ]
}